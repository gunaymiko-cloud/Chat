let socket;
let currentUser = '';
let isBold = false;

function joinChat() {
    const username = document.getElementById('usernameInput').value.trim();
    
    if (username === '') {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    currentUser = username;
    
    // –ò–º–∏—Ç–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    socket = {
        send: function(data) {
            console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
            simulateMessageReceiving(data);
        }
    };
    
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('chatMain').style.display = 'flex';
    
    addSystemMessage(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, ${username}!`);
    updateOnlineUsers();
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    document.getElementById('messageInput').focus();
}

function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    let message = messageInput.value.trim();
    
    if (message === '') return;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ
    if (isBold) {
        message = `**${message}**`;
        isBold = false;
        updateFormattingButton();
    }
    
    const messageData = {
        type: 'message',
        user: currentUser,
        text: message,
        time: new Date().toLocaleTimeString()
    };
    
    socket.send(JSON.stringify(messageData));
    addMessage(currentUser, message, true);
    messageInput.value = '';
    messageInput.style.height = 'auto'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
}

function addMessage(user, text, isOwn = false) {
    const messagesContainer = document.getElementById('chatMessages');
    const messageElement = document.createElement('div');
    messageElement.className = `message ${isOwn ? 'own-message' : 'other-message'}`;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let formattedText = text;
    formattedText = formattedText.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    formattedText = formattedText.replace(/:\)/g, 'üòä');
    formattedText = formattedText.replace(/:\(/g, 'üò¢');
    formattedText = formattedText.replace(/<3/g, '‚ù§Ô∏è');
    
    messageElement.innerHTML = `
        <div class="message-sender">
            ${isOwn ? '–í—ã' : user}
            <span class="message-time">${new Date().toLocaleTimeString()}</span>
        </div>
        <div class="message-text">${formattedText}</div>
    `;
    
    messagesContainer.appendChild(messageElement);
    scrollToBottom();
}

function addSystemMessage(text) {
    const messagesContainer = document.getElementById('chatMessages');
    const messageElement = document.createElement('div');
    messageElement.className = 'message system-message';
    messageElement.innerHTML = `<em>${text}</em>`;
    
    messagesContainer.appendChild(messageElement);
    scrollToBottom();
}

function scrollToBottom() {
    const messagesContainer = document.getElementById('chatMessages');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function updateOnlineUsers() {
    const usersList = document.getElementById('usersList');
    const onlineCount = document.getElementById('onlineCount');
    
    const users = [currentUser, '–ú–∞–∫—Å–∏–º', '–°–∞—à–∞', '–ú–∞—à–∞'];
    
    usersList.innerHTML = '';
    users.forEach(user => {
        const userElement = document.createElement('div');
        userElement.className = `user-item ${user === currentUser ? 'own-user' : ''}`;
        userElement.textContent = user === currentUser ? `${user} (–í—ã)` : user;
        usersList.appendChild(userElement);
    });
    
    onlineCount.textContent = users.length;
}

function addEmoji(emoji) {
    const messageInput = document.getElementById('messageInput');
    const start = messageInput.selectionStart;
    const end = messageInput.selectionEnd;
    const text = messageInput.value;
    
    messageInput.value = text.substring(0, start) + emoji + text.substring(end);
    messageInput.focus();
    messageInput.selectionStart = messageInput.selectionEnd = start + emoji.length;
}

function toggleFormatting() {
    isBold = !isBold;
    updateFormattingButton();
    document.getElementById('messageInput').focus();
}

function updateFormattingButton() {
    const buttons = document.querySelectorAll('.action-btn');
    const boldButton = Array.from(buttons).find(btn => btn.textContent === 'B');
    if (boldButton) {
        boldButton.style.background = isBold ? '#667eea' : '#e2e8f0';
        boldButton.style.color = isBold ? 'white' : 'inherit';
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
document.getElementById('messageInput').addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = Math.min(this.scrollHeight, 120) + 'px';
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter (Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
document.getElementById('messageInput').addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
    }
});

document.getElementById('usernameInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        joinChat();
    }
});

// –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function simulateMessageReceiving(data) {
    const messageData = JSON.parse(data);
    
    if (messageData.type === 'message') {
        setTimeout(() => {
            const responses = [
                '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
                '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! üëç',
                '–Ø —Ç–æ–∂–µ —Ç—É—Ç) üòä',
                '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?',
                '–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —ç—Ç–æ **–≤–∞–∂–Ω–æ**',
                '–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ 100% ‚ù§Ô∏è'
            ];
            
            const randomResponse = responses[Math.floor(Math.random() * responses.length)];
            const randomUser = ['–ú–∞–∫—Å–∏–º', '–°–∞—à–∞', '–ú–∞—à–∞'][Math.floor(Math.random() * 3)];
            
            addMessage(randomUser, randomResponse);
        }, 1000 + Math.random() * 3000);
    }
}

// –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('load', scrollToBottom);


